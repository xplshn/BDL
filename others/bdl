```BDL - POSIX DASH SCRIPT SNIPPET
# Function to retrieve cached file location
return_cached_file() {
    PACKAGE_NAME="$1"

    if [ -f "$CACHE_FILE" ] && grep -q "^$PACKAGE_NAME " "$CACHE_FILE"; then
        CACHED_LOCATION=$(grep -E "^$PACKAGE_NAME " "$CACHE_FILE" | awk '{ print $2 }')
        if [ -n "$CACHED_LOCATION" ]; then
            printf "%s\n" "$CACHED_LOCATION"
            return 0
        fi
    fi

    return 1
}

# Function to clean the cache (limit 40 programs)
clean_cache() {
    if [ -f "$CACHE_FILE" ]; then
        # Remove duplicate entries in the cache
        awk '!seen[$0]++' "$CACHE_FILE" > temp.txt
        mv temp.txt "$CACHE_FILE"

        # Remove non-existent files from the cache
        while read -r line; do
            cached_package=$(echo "$line" | awk '{print $1}')
            cached_file=$(echo "$line" | awk '{print $2}')
            if [ ! -f "$TEMP_DIR/$cached_file" ] || [ "$cached_package" != "$(echo "$cached_file" | cut -d'-' -f 1 | cut -d'_' -f 2-)" ]; then
                sed -i "/$cached_file/d" "$CACHE_FILE"
            fi
        done < "$CACHE_FILE"
    fi
}

# Function to run from cache or fetch if not found
run_from_cache() {
    PACKAGE_NAME="$1"
    CACHED_LOCATION=$(return_cached_file "$PACKAGE_NAME")

    if [ -n "$CACHED_LOCATION" ] && [ -x "$TEMP_DIR/$CACHED_LOCATION" ]; then
        printf "%bRunning '%s' from cache...%b\n" "$GREEN" "$PACKAGE_NAME" "$NC"
        clean_cache
        "$TEMP_DIR/$CACHED_LOCATION" "${@:2}" # Pass additional parameters as flags
        return 0
    else
        NEW_CACHED_LOCATION="bdl_$PACKAGE_NAME-$(date +'%s')"
        if fetch_binary "$PACKAGE_NAME" "$TEMP_DIR" "$TEMP_DIR/$NEW_CACHED_LOCATION"; then
            echo "$PACKAGE_NAME $NEW_CACHED_LOCATION" >> "$CACHE_FILE" # Update cache with the fetched binary
            clean_cache # Clean the cache
            "$TEMP_DIR/$NEW_CACHED_LOCATION" "${@:2}" # Execute the fetched binary
            return 0
        else
            return 1
        fi
    fi
}
```
